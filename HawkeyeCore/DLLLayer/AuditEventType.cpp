#include "stdafx.h"

#include <map>
#include <string>

#include "AuditEventType.hpp"
#include "EnumConversion.hpp"

//*****************************************************************************
const std::map<audit_event_type, std::string> EnumConversion<audit_event_type>::enumStrings<audit_event_type>::data =
{
	{ audit_event_type::evt_login, std::string ("Login") },
	{ audit_event_type::evt_logout, std::string ("Logout") },
	{ audit_event_type::evt_logoutforced, std::string ("Logout Forced") },
	{ audit_event_type::__UNUSED__3, std::string ("__UNUSED__3") },
	{ audit_event_type::evt_loginfailure, std::string ("Login Failure") },
	{ audit_event_type::evt_accountlockout, std::string ("Account Lockout") },
	{ audit_event_type::evt_useradd, std::string ("User Added") },
	{ audit_event_type::evt_userremove, std::string ("User Removed") },
	{ audit_event_type::evt_userenable, std::string ("User Enable") },
	{ audit_event_type::evt_userdisable, std::string ("User Disable") },
	{ audit_event_type::evt_passwordchange, std::string ("Password Change") },
	{ audit_event_type::evt_passwordreset, std::string ("Password Reset") },
	{ audit_event_type::evt_userpermissionschange, std::string ("User Permission Change") },
	{ audit_event_type::__UNUSED__15, std::string ("__UNUSED__15") },
	{ audit_event_type::evt_securityenable, std::string ("Security Enable") },
	{ audit_event_type::evt_securitydisable, std::string ("Security Disable") },
	{ audit_event_type::evt_celltypecreate, std::string ("CellType Create") },
	{ audit_event_type::evt_celltypemodify, std::string ("CellType Modify") },
	{ audit_event_type::evt_celltypedelete, std::string ("CellType Delete") },
	{ audit_event_type::evt_analysiscreate, std::string ("Analysis Create") },
	{ audit_event_type::evt_analysismodify, std::string ("Analysis Modify") },
	{ audit_event_type::evt_analysisdelete, std::string ("Analysis Delete") },
	{ audit_event_type::evt_bioprocesscreate, std::string ("Bioprocess Create") },
	{ audit_event_type::evt_bioprocessdelete, std::string ("Bioprocess Delete") },
	{ audit_event_type::evt_qcontrolcreate, std::string ("QualityControl Create") },
	{ audit_event_type::evt_qcontroldelete, std::string ("QualityControl Delete") },
	{ audit_event_type::evt_fluidicsflush, std::string ("Fluidics Flush") },
	{ audit_event_type::evt_fluidicsprime, std::string ("Fluidics Prime") },
	{ audit_event_type::evt_fluidicsdrain, std::string ("Fluidics Drain") },
	{ audit_event_type::evt_fluidicsdecontaminate, std::string ("Fluidics Decontaminate") },
	{ audit_event_type::evt_fluidicspurge, std::string ("Fluidics Purge") },
	{ audit_event_type::evt_fluidicsnightlyclean, std::string ("Fluidics Nightly Clean") },
	{ audit_event_type::evt_reagentload, std::string ("Reagent Pack Load") },
	{ audit_event_type::evt_reagentunload, std::string ("Reagent Pack Unload") },
	{ audit_event_type::evt_reagentinvalid, std::string ("Reagent Invalid") },
	{ audit_event_type::evt_reagentunusable, std::string ("Reagent Unusable") },
	{ audit_event_type::evt_firmwareupdate, std::string ("Firmware Update") },
	{ audit_event_type::evt_auditlogarchive, std::string ("AuditLog Archive") },
	{ audit_event_type::evt_errorlogarchive, std::string ("ErrorLog Archive") },
	{ audit_event_type::evt_samplelogarchive, std::string ("SampleLog Archive") },
	{ audit_event_type::__UNUSED__42, std::string ("__UNUSED__42") },
	{ audit_event_type::evt_datavalidationfailure, std::string ("Data Validation Failure") },
	{ audit_event_type::evt_signaturedefinitionadd, std::string ("Signature Definition Added") },
	{ audit_event_type::evt_signaturedefinitionremove, std::string ("Signature Definition Removed") },
	{ audit_event_type::evt_concentrationinterceptset, std::string ("Concentration Intercept Set") },
	{ audit_event_type::evt_concentrationinterceptnotset, std::string ("Concentration Intercept Not Set") },
	{ audit_event_type::evt_concentrationslopeset, std::string ("Concentration Slope Set") },
	{ audit_event_type::evt_concentrationslopenotset, std::string ("Concentration Slope Not Set") },
	{ audit_event_type::evt_sizeinterceptset, std::string ("Size Intercept Set") },
	{ audit_event_type::evt_sizeinterceptnotset, std::string ("Size Intercept Not Set") },
	{ audit_event_type::evt_sizeslopeset, std::string ("Size Slope Set") },
	{ audit_event_type::evt_sizeslopenotset, std::string ("Size Slope Not Set") },
	{ audit_event_type::evt_notAuthorized, std::string ("Unauthorized Access Attempt") },
	{ audit_event_type::evt_instrumentconfignotfound, std::string ("Instrument Configuration Not Found") },
	{ audit_event_type::evt_instrumentconfigimported, std::string ("Instrument Configuration Imported") },
	{ audit_event_type::evt_instrumentconfigexported, std::string ("Instrument Configuration Exported") },
	{ audit_event_type::evt_autofocusaccepted, std::string ("Auto Focus Accepted") },
	{ audit_event_type::evt_clearedexportdata, std::string ("Cleared Export Data") },
	{ audit_event_type::__UNUSED__60, std::string ("__UNUSED__60") },
	{ audit_event_type::evt_clearedcalibrationfactors, std::string ("Cleared Slope and Intercept Offset Factors") },
	{ audit_event_type::evt_dustsubtractionaccepted, std::string ("Dust Subtraction Accepted") },
	{ audit_event_type::evt_deletesamplerecord, std::string ("Delete Sample Record") },
	{ audit_event_type::evt_deleteworklistrecord, std::string ("Delete Worklist Record") },
	{ audit_event_type::evt_manualfocusoperation, std::string ("Manual Focus Operation") },
	{ audit_event_type::evt_bioprocessactivate, std::string ("Bioprocess Activate") },
	{ audit_event_type::evt_bioprocessdeactivate, std::string ("Bioprocess Deactivate") },
	{ audit_event_type::evt_datasignatureapplied, std::string ("Result Signed") },
	{ audit_event_type::evt_deleteresultrecord, std::string ("Delete Result Record") },
	{ audit_event_type::evt_sampleprocessingerror, std::string ("Sample Processing Error") },
	{ audit_event_type::evt_offlinemode, std::string ("Offline Mode") },
	{ audit_event_type::evt_sampleresultcreated, std::string ("Sample Result Created") },
	{ audit_event_type::evt_Instrumentdataexported, std::string ("Instrument Data Exported") },
	{ audit_event_type::evt_setuserpasswordexpiration, std::string ("Set User Password Expiration") },
	{ audit_event_type::evt_setuserinactivitytimeout, std::string ("Sample User Inactivity Timeout") },
	{ audit_event_type::evt_updatefailed, std::string ("Firmware Update Failed") },
	{ audit_event_type::evt_fluidicsautomationnightlyclean, std::string ("ACup Nightly Clean") },
	{ audit_event_type::evt_acupusingstandardconcentrationintercept, std::string ("ACup Using Standard Concentration Slope") },
	{ audit_event_type::evt_worklist, std::string("Worklist ") },
	{ audit_event_type::evt_automation, std::string("Automation ") },
	{ audit_event_type::evt_acup, std::string("A-Cup ") },
	{ audit_event_type::evt_setusercfg, std::string("Set User Configuration") },
	{ audit_event_type::evt_automationlocked, std::string("Automation Lock") },
	{ audit_event_type::evt_automationunlocked, std::string("Automation Unlock") },
};
