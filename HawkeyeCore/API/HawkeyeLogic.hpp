// ReSharper disable CppInconsistentNaming
#pragma once

#include "ActiveDirectory.hpp"
#include "AnalysisDefinition.hpp"
#include "Autofocus.hpp"
#include "AutomationConfig.hpp"
#include "Bioprocess.hpp"
#include "BrightfieldDustSubtractWorkflow.hpp"
#include "CalibrationHistory.hpp"
#include "CellHealthReagents.hpp"
#include "CellType.hpp"
#include "ColumnSetting.hpp"
#include "DBConfig.h"
#include "Fluidics.hpp"
#include "HawkeyeError.hpp"
#include "ImageWrapper.hpp"
#include "InitializationState.hpp"
#include "NativeDataType.hpp"
#include "QualityControl.hpp"
#include "Reagent.hpp"
#include "Reports.hpp"
#include "ResultDefinition.hpp"
#include "ScheduledExport.hpp"
#include "SecurityHelpers.hpp"
#include "SMTPConfig.h"
#include "SystemStatusCommon.hpp"
#include "UserLevels.hpp"
#include "uuid__t.hpp"
#include "Worklist.hpp"

#include "HawkeyeConfig.hpp"
/*
IMPORTANT - A NOTE ON STRING DATA AND NON-ASCII CHARACTER SETS
--------------------------------------------------------------
All string data on at this interface SHALL BE encoded as UTF-8 byte strings.
The representation format will be 8-bit "char" datatypes.  When given as an array (char*)
the string will be null-terminated.

The HOST is responsible for converting/normalizing these byte strings for any
higher-level representation.

The host is strongly encouraged to be consistent in whether it uses fully-composed characters or
combos - this library will NOT combine them on your behalf nor will it "intelligently" compare
fully-composed characters against combining characters.

Data GENERATED by this interface can be expected to be ASCII.
*/


extern "C"
{
	//****************************************************************************
	// Initialize the instrument.  For desktop/standalone mode, call with "with_hardware" set to false.
	DLL_CLASS void Initialize (bool with_hardware = true);
	DLL_CLASS InitializationState IsInitializationComplete();
	DLL_CLASS void Shutdown();
	DLL_CLASS bool IsShutdownComplete();

	//****************************************************************************
	DLL_CLASS void GetSystemStatus (SystemStatusData*& status); // Stage status / location, probe up/down, reagent door/pierce
	DLL_CLASS void FreeSystemStatus (SystemStatusData* status);

	/// Retrieve the system serial number.
	///  An error code will be returned if the serial number is unset or indeterminate.
	/// Return values: eSuccess - serial number retrieved successfully.
	///                eNoneFound - no serial number currently recorded (serialNumber will be NULL)
	///                eEntryInvalid - serial number data is invalid; serialNumber will have a value, but this return code
	///                                indicates that Service must reset the instrument serial number as soon as possible.
	DLL_CLASS HawkeyeError GetSystemSerialNumber(char*& serialNumber);

	// Takes a reported error code (such as may be reported in SystemStatus::active_error_codes) and returns
	//  an English string description of it.
	// Unknown error codes will return a NULL pointer value.
	DLL_CLASS char* SystemErrorCodeToString(uint32_t system_error_code);
	DLL_CLASS void SystemErrorCodeToExpandedStrings(uint32_t system_error_code, 
		char*& severity, 
		char*& system, 
		char*& subsystem, 
		char*& instance, 
		char*& failure_mode,
		char*& cellHealthErrorCode);
	DLL_CLASS void SystemErrorCodeToExpandedResourceStrings(uint32_t system_error_code, 
		char*& severity, 
		char*& system, 
		char*& subsystem, 
		char*& instance, 
		char*& failure_mode,
		char*& cellHealthErrorCode);

	/// Instruct the system to clear (however temporarily) an active error code.
	/// This API would be used if the user wishes to acknowledge and dismiss an error.
	///   * The error MAY clear on its own
	///   * The error MAY restore itself immediately.
	///   * No particular error code is returned if the requested error is unknown or not presently active.
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - must be a logged-in user to request clearing of an error
	DLL_CLASS HawkeyeError ClearSystemErrorCode(uint32_t active_error);

	//****************************************************************************
	DLL_CLASS void GetVersionInformation (SystemVersion& version);

	//****************************************************************************
	/// Release memory allocated by the DLL for simple data types.
	/// ANY and ALL pointers returned by the HawkeyeLogicInterface MUST
	///  be freed through this interface.
	/// Complex structures (those with internal memory allocation) will have their own deletion function
	///  defined and MUST be deleted through that function.
	
	/// Return values: eSuccess
	///                eInavlidArgs - Invalid data type /Valid "ptr" but zero "numitems"/ Null "ptr" but non-zero "numitems".
	DLL_CLASS HawkeyeError FreeListOfTaggedBuffers(NativeDataType tag, void* ptr, uint32_t numitems);
	
	/// Return values: eSuccess
	///                eInavlidArgs - Invalid data type.
	DLL_CLASS HawkeyeError FreeTaggedBuffer(NativeDataType tag, void* ptr);

	// TODO replace usages of these in the UI with 'tagged' versions
	DLL_CLASS void FreeCharBuffer (char* ptr);
	DLL_CLASS void FreeListOfCharBuffers(char** ptr, uint32_t numitems);

	//****************************************************************************

	/// Retrieve list of all users.
	/// Set `only_enabled` to TRUE to retrieve only the currently-enabled users
	///
	/// Return values: eSuccess
	DLL_CLASS HawkeyeError GetUserList (bool only_enabled, char**& userList, uint32_t& numUsers);

	/// Return values: eSuccess
	///                eNotPermittedAtThisTime - a user is not currently logged in
	DLL_CLASS HawkeyeError GetCurrentUser (char*& name, UserPermissionLevel& permissions);

	/// Return values: eSuccess
	///                eInvalidArgs - specified user does not exist
	///                eValidationFailed - Attempt to retrieve folder name for an invalid account
	DLL_CLASS HawkeyeError GetUserPermissionLevel(const char* name, UserPermissionLevel& permissions);

	/// Return values: eSuccess
	///                eInvalidArgs - user doesn't exist or password does not match.
	///                eNotPermittedAtThisTime - a user is currently logged in; user must log out first.
	/// NOTE: a user cannot be created with "eService" permissions.
	DLL_CLASS HawkeyeError LoginUser (const char* name, const char* password);
	DLL_CLASS void LogoutUser();

	// @todo - remove the functions above once UI is changed

	DLL_CLASS HawkeyeError LoginConsoleUser(const char* username, const char* password);
	DLL_CLASS void LogoutConsoleUser();

	DLL_CLASS HawkeyeError LoginRemoteUser(const char* username, const char* password);
	DLL_CLASS void LogoutRemoteUser(const char* username);

	/// Attempt to "swap" active users.  If no user is presently logged in, this API behaves identically to 
	/// LoginUser(...).  If a user is presently logged in, the system will attempt to validate the new user's credentials.
	/// If validation succeeds, then the existing user is logged out and the new user is logged in.
	/// If validation fails, then an invalid access attempt is recorded and the existing user remains logged in.

	/// Return values: eSuccess
	///                eInvalidArgs - user doesn't exist or password does not match.
	///                eNotPermittedAtThisTime - Failed to log out the current user.
	DLL_CLASS HawkeyeError SwapUser(const char* newusername, const char* password, SwapUserRole swapRole);

	/// Allow the host to disable a user for administrative reasons (too many incorrect password attempts, for instance)
	/// The Host must know the correct security key used to generate the Host Password which will be verified by the disabling
	/// function.
	///
	/// Return values: eSuccess
	///                eInvalidArgs - user doesn't exist or password does not match (or an attempt to disable a built-in user)
	///                eNotPermittedAtThisTime - the specified user is already logged in (cannot disable now)
	DLL_CLASS char* GenerateHostPassword(const char* securitykey);
	
	/// Return values: eSuccess - Administrator account verified, user account found and enabled
	///                eInvalidArgs - Failed to locate user account or user does not exist
	///                eValidationFailed - Failed to validate administrator_account or administrator_account lacks correct privileges
	///                eStorageFault - Failed to update the configuration
	DLL_CLASS HawkeyeError AdministrativeUserEnable(const char* administrator_account, const char* administrator_password, const char* user_account);

	/// Returns the Security state- enabled /disabled
	DLL_CLASS HawkeyeError GetSystemSecurityType(eSECURITYTYPE& secType);

	/// Get the active value for the user inactivity timeout.
	/// The Host is responsible for tracking the user's session activity and initiating an administrative logout
	///  when appropriate.
	/// If the host needs to log a user out due to inactivity, use the API call "LogoutUser_Inactivity()".
	DLL_CLASS void GetUserInactivityTimeout(uint16_t& minutes);

	DLL_CLASS void GetUserPasswordExpiration(uint16_t& days);

	/// The host has determined that the current user has exceeded the inactivity period and will 
	///  be automatically logged out.
	/// Requires a non-zero inactivity period (checked from GetUserInactivityTimeout())
	/// Return values: eSuccess
	///                eNotPermittedByUser - User lacks sufficient permission
	///                eInvalidArgs - no inactivity period is currently configured.
	DLL_CLASS HawkeyeError LogoutUser_Inactivity();


	/// Reagent indices range from 1..N
	/// If system is in a state where the true number of reagents is unknown (ex: loading / unloading / unloaded)
	///  then a single ReagentState will be returned with the overall status information
	/// Return values: eSuccess
	///                eInvalidArgs - invalid reagent index (1..N)
	///                eHardwareFault - Failed to read the RFID tag data.
	///                eNoneFound -- Pack not installed
	DLL_CLASS HawkeyeError GetReagentContainerStatus (uint16_t container_num, ReagentContainerState*& status);
	DLL_CLASS HawkeyeError GetReagentContainerStatusAll (uint16_t& num_reagents, ReagentContainerState*& status);
	DLL_CLASS void FreeListOfReagentContainerState (ReagentContainerState* list, uint32_t num_containers);

	/// Return values: eSuccess
	///                eHardwareFault - Failed to read the RFID tag data.
	///                eNoneFound -- Pack not installed
	DLL_CLASS HawkeyeError GetReagentDefinitions (uint32_t& num_reagents, ReagentDefinition*& reagents);

	/// List of known reagent types
	DLL_CLASS void FreeReagentDefinitions (ReagentDefinition*& reagents, uint32_t& num_reagents);

	DLL_CLASS void FreeListOfCellType (CellType* list, uint32_t num_celltypes);
	DLL_CLASS void FreeAnalysisDefinitions (AnalysisDefinition* list, uint32_t num_analyses);
	DLL_CLASS HawkeyeError GetReagentVolume (CellHealthReagents::FluidType type, int32_t& volume_ul);
	DLL_CLASS HawkeyeError SetReagentVolume (CellHealthReagents::FluidType type, int32_t volume_ul);
	DLL_CLASS HawkeyeError AddReagentVolume (CellHealthReagents::FluidType type, int32_t volume_ul);

	DLL_CLASS HawkeyeError GetSampleColumns(const char* username, ColumnSetting*& recs, uint32_t& retrieved_count);
	DLL_CLASS HawkeyeError SetSampleColumns(const char* username, ColumnSetting* recs, uint32_t count);
	DLL_CLASS void FreeSampleColumns(ColumnSetting* recs, uint32_t count);
	
	//
	// User record access
	//
	DLL_CLASS HawkeyeError GetUserRecord(const char* username, UserRecord*& record);
	DLL_CLASS void FreeUserRecord(UserRecord* record);
	// @todo - needs implementation - this will allow setting LANG and Run-Options / defaults
	// DLL_CLASS HawkeyeError UpdateUserRecord(const UserRecord* record);
	// @todo - remove the following functions once UpdateUserRecord is implemented
	// @deprecated APIs
	DLL_CLASS HawkeyeError SetDisplayDigits(const char* username, uint32_t digits);
	DLL_CLASS HawkeyeError SetUserFastMode(const char* username, bool enabled);
	DLL_CLASS HawkeyeError SetUserEmail(const char* username, const char* email);
	DLL_CLASS HawkeyeError SetUserComment(const char* username, const char* comment);
	DLL_CLASS HawkeyeError SetUserFolder(const char* name, const char* folder);

	DLL_CLASS HawkeyeError GetAllowedCellTypes(const char* username, uint32_t& num_celltypes, CellType*& celltypes);
	// @todo - refator to remove 'indecies' Note current impl func is SetAllowedCellTypeIndices
	DLL_CLASS HawkeyeError SetUserCellTypeIndices(const char* name, uint32_t nCells, uint32_t* celltype_indices);
	DLL_CLASS HawkeyeError GetUserAnalysisIndices(const char* name, uint32_t& n_ad, NativeDataType& tag, uint16_t*& analysis_indices);
	DLL_CLASS HawkeyeError SetUserAnalysisIndices(const char* name, uint32_t n_ad, uint16_t* analysis_indices);

	/*********************************************************************************************************************************
	* Service Interface
	* These functions require a logged-in user with permissions "eService" or higher
	*********************************************************************************************************************************/
	
	/// Set the instrument serial number.  This function requires Service permissions
	///  and the re-verification of the service user password.
	/// Return values: eSuccess - serial number has been stored
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions
	///                eValidationFailed - unable to validate login credentials
	///                eInvalidArgs - serial number not appropriate (DEFINITION TBD)
	///                eNotPermittedAtThisTime - System Hardware is not initialized.
	///                eHardwareFault - Failed to set the serial number
	DLL_CLASS HawkeyeError svc_SetSystemSerialNumber(char* serial, char* service_password);


	/// Manually adjust camera focus position.  For coarse adjustment (10x fine step)
	/// Return values: eSuccess - Motion has been requested.
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eHardwareFault - a hardware fault, condition prevents this action.
	DLL_CLASS HawkeyeError svc_CameraFocusAdjust (bool direction_up, bool adjustment_fine);

	/// Restore camera to previously-stored position setting (may re-home focus motor)
	/// Return values: eSuccess - Success
	///                eNotPermittedByUser - User does not have the service permission.
	///                eHardwareFault - Unable to initialize focus controller / Failed to move focus motor to requested position
	DLL_CLASS HawkeyeError svc_CameraFocusRestoreToSavedLocation();

	/// Write the current focus position to disk as the new focus position.
	///  The service user MUST re-verify their login credentials to perform this action.
	/// Return values: eSuccess - Position has been saved to disk.
	///                eNotPermittedByUser - User does not have the service permission.
	///                eNotPermittedAtThisTime - Logged in user is invalidated user
	///                eValidationFailed - unable to validate login credentials
	///                eHardwareFault - Focus controller is not initialized / Failed to move focus motor to requested position
	//Deprecated
	DLL_CLASS HawkeyeError svc_CameraFocusStoreCurrentPosition(char* password);

	typedef void(*autofocus_state_callback_t)(eAutofocusState status, AutofocusResults* results);
	typedef void(*countdown_timer_callback_t)(uint32_t timeRemaining_seconds);

	/// Begin the autofocus sequence using a sample located at "focusbead_location".  
	/// Status will be updated through the supplied callback function.  When the autofocus routine has 
	///  calculated a result, the callback will be called with a status of "af_WaitingForFocusAcceptance" and 
	///  a non-NULL AutofocusResults pointer.  The Host must accept, retry or cancel the focus routine
	///  through a call to svc_CameraAutoFocus_FocusAcceptance.
	/// An actively-running focus sequence (or one waiting for focus acceptance) may be cancelled through a 
	///  call to svc_CameraAutoFocusCancel();
	/// Callback "on_timer_tick" will be used to indicate remaining time(in seconds)
	/// once the state reaches "af_SampleSettlingDelay" autofocus state.
	/// Return values: eSuccess
	///                eNotPermittedByUser - User does not have the service permission.
	///                eNotPermittedAtThisTime - System is performing other tasks
	///                eHardwareFault - Focus controller is not initialized / Failed to move focus motor to requested position
	///                eStageNotRegistered - Sample carrier registration is not performed.
	DLL_CLASS HawkeyeError svc_CameraAutoFocus(SamplePosition focusbead_location, autofocus_state_callback_t on_status_change, countdown_timer_callback_t on_timer_tick);

	/// Return values: eSuccess
	///                eNotPermittedByUser - User does not have the service permission.
	///                eNotPermittedAtThisTime - System is performing other tasks
	DLL_CLASS HawkeyeError svc_CameraAutoFocus_ServiceSkipDelay ();	/* A service user may choose to skip to the end of the settling delay step. */
	DLL_CLASS HawkeyeError svc_CameraAutoFocus_Cancel ();

	/// Return values: eSuccess
	///                eNotPermittedByUser - User does not have the service permission.
	///                eNotPermittedAtThisTime - System is performing other tasks
	///                eInvalidArgs - Invalid decision input.
	DLL_CLASS HawkeyeError svc_CameraAutoFocus_FocusAcceptance (eAutofocusCompletion decision);

	/// Get/Set the depth of the flowcell (value typically taken from vendor calibration sheet
	///  as shipped with the flow cell).  This is a value that helps determine the offset for the
	///  final focus position after the "optimal" location has been determined.
	/// When a new flow cell is installed, the Service user must record its depth here and re-run the
	///  auto-focus sequence to determine the new final focal point.
	/// Values here are in MICRONS and the system will accept flow cell depths from 50 to 100um.
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - must be logged-in user to access these functions
	DLL_CLASS HawkeyeError svc_GetFlowCellDepthSetting(uint16_t& flow_cell_depth);

	/// Return values: eSuccess
	///                eNotPermittedByUser - must be Service user to access these functions
	///                eInvalidArgs - flow cell depth out of range (50-100)
	DLL_CLASS HawkeyeError svc_SetFlowCellDepthSetting (uint16_t flow_cell_depth);

	/// Description: Turn bright-field LED ON/OFF and if ON then set the LED intensity to requested value
	/// Returns:
	///      eSuccess            - Success 
	///      eNotPermittedByUser   User does not have the service permission.
	///      eInvalidArgs          Intensity is out of range (must be 0.0 to 25.0, inclusive)
	///      eHardwareFault      - Failed to set LED intensity to requested value
	DLL_CLASS HawkeyeError svc_SetCameraLampState(bool lamp_on, float intensity_0_to_25);
	
	/// Description: Set the bright-field LED intensity to requested value
	/// Returns:
	///      eSuccess            - Success 
	///      eNotPermittedByUser   User does not have the service permission.
	///      eInvalidArgs          Intensity is out of range (must be 0.0 to 100.0)
	///      eHardwareFault      - LED is turned off / Failed to set LED intensity to requested value
	DLL_CLASS HawkeyeError svc_SetCameraLampIntensity(float intensity_0_to_100);
	
	/// Description: Gets the bright-field Led state (ON/OFF) and it's current intensity.
	/// Returns:
	///      eSuccess            - Success 
	///      eNotPermittedByUser   User does not have the service permission. 
	///      eHardwareFault      - Failed to read LED intensity
	DLL_CLASS HawkeyeError svc_GetCameraLampState(bool& lamp_on, float& intensity_0_to_100);

	/// To generate temporary/single-shot analyses, the Host must first set up the Temporary Cell Type and Analysis settings
	/// and then call the functions below to generate data.  
	typedef void(*service_analysis_result_callback)(HawkeyeError, BasicResultAnswers, ImageWrapper_t*);

	/// Return Values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	DLL_CLASS HawkeyeError svc_StopContinuousAnalysis();

	/// Return Values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eBusy - instrument is busy executing other tasks
	DLL_CLASS HawkeyeError svc_GenerateSingleShotAnalysis (service_analysis_result_callback callback);
	DLL_CLASS HawkeyeError svc_GenerateContinuousAnalysis (service_analysis_result_callback callback);

	/// Sets the preference for the type of images returned by the single/continuous analysis functions.
	///   Default value is eImageOutputType::eImageAnnotated
	///   Can be changed mid-analysis.
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eInvalidArgs - One or more items in the work queue are invalid (malformed or do not match hardware configuration)
	//Deprecated
	DLL_CLASS HawkeyeError svc_SetAnalysisImagePreference(eImageOutputType image_type);

	/// Allows a service user to toggle a live image feed from the camera to test the effect of
	/// various changes in the instrument.
	/// The live feed is implemented as a series of still images which will be returned sequentially to the Host
	///  via a callback mechanism.
	/// The live feed can only be used when no work queue processing or other image gathering operation is in progress.
	/// The live feed CAN be used when the autofocus workflow is in the "settling delay" state.

	typedef void (*service_live_image_callback)(HawkeyeError, ImageWrapper_t*);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eNotPermittedAtThisTime - the instrument is unable to take images at this time
	///                eBusy - the instrument is already executing tasks which require the camera
	DLL_CLASS HawkeyeError svc_StartLiveImageFeed (service_live_image_callback callback);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eInvalidArgs - internal images id mismatch.
	DLL_CLASS HawkeyeError svc_StopLiveImageFeed();


	/// Automated sample handling activities for the service user
	/// Load: aspirates a sample from the current sample location; dispenses all but _____ microliters of sample; primes sample into the flow cell
	/// Nudge: dispenses ____ microliters of sample through the flowcell
	/// Expel: dispenses remainder of sample to the Waste.
	/// These functions assist the service user in exercising the system and evaluating the optical performance of the system (when used with the
	/// live image feed or single-shot analysis/continuous analysis features.
	/// The user is recommended to use the "flush" functions to clear the remainder of the sample from the flow cell and sample lines after 
	/// exercising these functions.
	///
	/// Return Values: eSuccess
	///                eNotPermittedByUser
	///                eBusy - instrument cannot be operated manually at this time
	///                eNotPermittedAtThisTime - "nudge" failed because no sample remains in the syringe pump
	DLL_CLASS HawkeyeError svc_ManualSample_Load();
	DLL_CLASS HawkeyeError svc_ManualSample_Nudge();
	DLL_CLASS HawkeyeError svc_ManualSample_Expel();

	/// Description: Gets the syringe valve port
	/// Returns:
	///      eSuccess         - Success
	///      eHardwareFault   - Failed to read the valve port
	DLL_CLASS HawkeyeError svc_GetValvePort(char &port);

	/// Description: Validates the given input range (A - H), Sets the SyringePump port in clock wise direction 
	///             On success " valve port" will be set with the given Port input.
	/// Returns:
	///      eSuccess            - Success
	///      eNotPermittedByUser - User does not have the service permission.
	///      eInvalidArgs        - if the given valve is not valid.
	///      eHardwareFault      - Failed to set the valve port
	DLL_CLASS HawkeyeError svc_SetValvePort(char port);

	/// Description: Gets the syringe pump position
	/// Returns:
	///      eSuccess            - Success 
	///      eNotPermittedByUser   User is not logged in
	///      eHardwareFault      - Failed to read the Syringe position
	//Deprecated
	DLL_CLASS HawkeyeError svc_GetSyringePumpPostion(uint32_t &pos);

	/// Description: Reads the current syringe volume and port,validates input volume to aspirate and performs the aspiration.
	///              Aspiration is not allowed from "Waste(F)"
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	///      eInvalidArgs            - Given input volume to aspirate is greater than MAX syringe level OR
	///                                The given the input volume is less than the syringe current volume
	///      eHardwareFault          - Failed to read current volume / Failed to read the current valve / Failed to Aspirate
	///      eNotPermittedAtThisTime - If the current active valve is 'F'
	DLL_CLASS HawkeyeError svc_AspirateSample(uint32_t volume);

	/// Description: Reads the current syringe volume and port,validates input volume to dispense and performs the dispensing.
	///              Dispense is allowed only to "Waste(F)" "Sample(G)" and "Flow Cell(H)"
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	///      eInvalidArgs            - Given input volume level to dispense is greater than syringe current volume
	///      eHardwareFault          - Failed to read current volume / Failed to read the current valve /Failed to Dispense
	///      eNotPermittedAtThisTime - If the current active valve is not any out of 'F' 'G' and 'H'
	DLL_CLASS HawkeyeError svc_DispenseSample(uint32_t volume);

	/// Description: Gets the sample probe position.
	/// Returns:
	///      eSuccess            - Success 
	///      eNotPermittedByUser   User is not logged in
	DLL_CLASS HawkeyeError svc_GetProbePostion(int32_t &pos);

	/// Description: Moves the probe UP or DOWN in given steps
	/// Returns:
	///      eSuccess  - Success 
	///      eNotPermittedByUser       User does not have the service permission.
	///      eHardwareFault            Failed to move sample probe
	DLL_CLASS HawkeyeError svc_SetProbePostion(bool upDown, uint32_t stepsToMove);

	/// Description: Moves the Sample Probe UP( Top most probe position) and DOWN (probe maximum reachable bottom position)
	///              position.
	/// Returns:
	///      eSuccess       - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	///      eHardwareFault - Failed to move the Probe
	DLL_CLASS HawkeyeError svc_MoveProbe(bool upDown);

	/// Description: Gets the sample stage position either for carousel or plate
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User is not logged in
	///      eHardwareFault          - Stage is not initialized/ Incorrect position reported.
	DLL_CLASS HawkeyeError svc_GetSampleWellPosition(SamplePosition& pos);

	/// Description: Validates the input sample position and checks for initialization of the required carrier to set the Input sample position and proceeds to set the sample position if the carrier is present/active.
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User is not logged in
	///      eStageNotRegistered - Sample carrier registration is not performed.
	///      eHardwareFault          - Failed to set sample stage position.
	DLL_CLASS HawkeyeError svc_SetSampleWellPosition(SamplePosition pos);


	/// Description: Sets next valve in the order/sequence of the syringe pump. Ex: Initial
	///              valve port is "F"; after successful execution of this API valve port
	///              will be "G". The direction to set valve is clockwise direction.
	/// Returns:
	///      eSuccess            - Success 
	///      eNotPermittedByUser - User does not have the service permission.
	///      eHardwareFault      - Failed to read current valve location / Failed to set valve
	//Deprecated
	DLL_CLASS HawkeyeError svc_PerformValveRepetition();

	/// Description: Sets "Sample(G)" as active valve. Moves the syringe pump to 0-Empty position(No volume) and
	///              Aspirates 1000ul(max limit) followed by  Dispensing of same volume.
	///              Speed of the Syringe pump is 600ul/sec and direction
	///              to set valve is Clockwise.
	/// Returns:
	///      eSuccess            - Success 
	///      eNotPermittedByUser - User does not have the service permission.
	///      eHardwareFault      - Failed to set syringe valve / Failed to Aspirate or Dispense
	//Deprecated
	DLL_CLASS HawkeyeError svc_PerformSyringeRepetition();

	/// Description: Homes the Focus motor and adjust the focus to center or to place where better visibility can be achieved.
	/// Returns:
	///      eSuccess            - Success 
	///      eNotPermittedByUser - User does not have the service permission.
	///      eHardwareFault      - Failed to set syringe valve / Failed to Aspirate or Dispense
	//Deprecated
	DLL_CLASS HawkeyeError svc_PerformFocusRepetition();

	/// Description: Moves the Reagent Arm UP ( To the upper Home position sensor) and DOWN ( to the bottom limit position sensor )
	///              position.
	/// Returns:
	///      eSuccess       - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	///      eHardwareFault - Failed to move the Arm
	DLL_CLASS HawkeyeError svc_MoveReagentArm( bool up );

	/// Description: Homes the Reagent motor and performs reagent ARM down to insert the
	///              Reagent needles into Reagents followed by ARM UP.
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	///      eHardwareFault          - Error in Hardware. Failed to Home the reagent Motor..
	///      eNotPermittedAtThisTime - Reagent door is Open
	DLL_CLASS HawkeyeError svc_PerfomReagentRepetition();

	/// Description: Initializes the Carousel/Plate, if it is not initialized.
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	///      eHardwareFault          - Error in Hardware. Failed to initialize Carousel/Plate..
	DLL_CLASS HawkeyeError InitializeCarrier();

	/* Motor Calibration*/
	typedef void(*motor_calibration_state_callback)(CalibrationState);

	/// Description: Performs plate calibration and send status thru provided callback
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	///      eInvalidArgs            - Callback provided is null/invalid or calibration state is not idle
	///      eNotPermittedAtThisTime - If plate is not present
	DLL_CLASS HawkeyeError svc_PerformPlateCalibration(motor_calibration_state_callback); //, motor_calibration_step_completion_callback);
	
	/// Description: Performs carousel calibration and send status thru provided callback
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	///      eInvalidArgs            - Callback provided is null/invalid or calibration state is not idle
	///      eNotPermittedAtThisTime - If carousel is not present
	DLL_CLASS HawkeyeError svc_PerformCarouselCalibration(motor_calibration_state_callback);// , motor_calibration_step_completion_callback);
	
	/// Description: Cancels the ongoing calibration if not already completed
	///              and restore the stage to either previously calibrated or default state
	///              Callback will be triggered with "CalibrationState::eFault" state
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	///      eInvalidArgs            - Callback provided is null/invalid
	DLL_CLASS HawkeyeError svc_CancelCalibration(motor_calibration_state_callback onCalibStateChangeCb);
	
	/// Description: Gets the stage calibration backlash values set by service user.
	///              If no values have been set previously then default backlash values will be provided
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	//Deprecated
	DLL_CLASS HawkeyeError svc_GetStageCalibrationBacklash (int32_t& thetaBacklash, int32_t& radiusBacklash);
	
	/// Description: Sets the stage calibration backlash values to compensate for mechanical
	///              mechanical backlash when performing either "Plate" or "Carousel" calibration
	/// Returns:
	///      eSuccess                - Success 
	///      eNotPermittedByUser     - User does not have the service permission.
	//Deprecated
	DLL_CLASS HawkeyeError svc_SetStageCalibrationBacklash (int32_t thetaBacklash, int32_t radiusBacklash);

	/*********************************************************************************************************************************
	* Administrative Interface
	* These functions require a logged-in user with permissions "eElevated" or higher except for user management functions,
	* which require eAdministrator or higher.
	*********************************************************************************************************************************/

	// @todo - v1.4 refactor how security types are set. create different functions for each type and validate the config before changing. 
	//
	/// Enable / Disable the system security features. 
	/// User must have Administrator privilege (cannot be a Service user). 
	/// After changing the security, system will logout from the current logged in Session.
	/// Affected:
	///   - Password expiration
	///   - Inactivity timeouts
	///   - Cell type limits (all cell types available to all users)
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eValidationFailed - credentials validation failed
	///                eNoneFound - user not found
	DLL_CLASS HawkeyeError SetSystemSecurityType (eSECURITYTYPE secType, const char* uname, const char* password);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eAlreadyExists - Specified name already exists
	///                eInvalidArgs - name or password does not meet criteria; permissions has an invalid value
	/// NOTE: a user cannot be created with "eService" permissions.
	DLL_CLASS HawkeyeError AddUser (const char* name, const char* displayname, const char* password, UserPermissionLevel permissions);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eInvalidArgs - specified user does not exist
	///                eNotPermittedAtThisTime - tried to remove the currently logged-in user
	///                eStorageFault - Failed to update configuration file or backup
	/// NOTE: The currently logged-in user cannot be removed.
	DLL_CLASS HawkeyeError RemoveUser (const char* name);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eInvalidArgs - Specified user does not exist/Built in account
	///                eNotPermittedAtThisTime - Tried to disable the currently logged-in user
	///                eValidationFailed - User validation failed; Failed to enable/disable the specified user
	///                eStorageFault - Failed to update the configuration
	/// NOTE: The currently logged-in user cannot be disabled.
	DLL_CLASS HawkeyeError EnableUser (const char* name, bool enabled);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eNotPermittedAtThisTime - Cannot change PW of current user through this API
	///                eInvalidArgs - Invalid password/username does not exist/ Built in account
	///                eValidationFailed - Password does not meet criteria/User validation failed
	///                eStorageFault -  Failed to update the configuration file.
	DLL_CLASS HawkeyeError ChangeUserPassword (const char* name, const char* password);

	/// Return values: eSuccess - expired parameter is valid 
	DLL_CLASS HawkeyeError IsPasswordExpired (const char* name, bool& expired);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eInvalidArgs - username does not exist/Built in account
	///                eValidationFailed - User validation failed
	///                eStorageFault - Failed to update the configuration file.
	///                eAlreadyExists - A user with the given display name exists.
	DLL_CLASS HawkeyeError ChangeUserDisplayName(const char* name, const char* displayname);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eNotPermitedAtThisTime - Cannot change permissions of the current user
	///                eInvalidArgs - user does not exist/Built in account
	///                eValidationFailed - Invalid permission/User validation failed
	///                eStorageFault - Failed to update the configuration file.
	/// NOTE: a user cannot be created with "eService" permissions.
	DLL_CLASS HawkeyeError ChangeUserPermissions (const char* name, UserPermissionLevel permissions);

	/// Set the inactivity timeout delay.  Use GetUserInactivityTimeout()_Setting to retrieve.
	/// Timeout is active if security setting is enabled.
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	DLL_CLASS HawkeyeError SetUserInactivityTimeout(uint16_t minutes);

	/// Set the password expiration period.
	/// Expiration is active if in lovcal security mode
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	DLL_CLASS HawkeyeError SetUserPasswordExpiration(uint16_t days);

	/// Cell Type Definition Management
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eNoneFound - cell type does not exist;
	///                eAlreadyExists - cell type index / name already exists (cannot duplicate)
	///                eInvalidArgs - cannot modify / delete a factory-defined cell type
	///                eValidationFailed - Failed to update Info file/ Audit log
	///                eStorageFault - Failed to read/ update the info/configuration file
	DLL_CLASS HawkeyeError GetFactoryCellTypes (uint32_t& num_ct, CellType*& celltypes);

	DLL_CLASS HawkeyeError AddCellType (const char* username, const char* password, CellType& celltype, uint32_t& ct_index, const char* retiredName);

	// Deprecated: not called by the UI anymore.
	DLL_CLASS HawkeyeError ModifyCellType (const char* username, const char* password, CellType& celltype);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eNoneFound - cell type does not exist;
	///                eInvalidArgs - cannot modify / delete a factory-defined cell type
	///                eValidationFailed - Failed to update Info file/ Audit log
	DLL_CLASS HawkeyeError RemoveCellType (const char* username, const char* password, uint32_t ct_index);

	/// These functions execute very simple data collection suitable for 
	/// tuning focus or Sample analysis or Reanalysis.  They do not generate permanent data.
	/// The base of the functionality is supported by a "temporary" Cell Type and Analysis type.

	/// Return Values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eInvalidArgs - Invalid input celltype/Analysis definition(nullptr)/ Invalid Index
	DLL_CLASS HawkeyeError SetTemporaryAnalysisDefinition (AnalysisDefinition* temp_definition);
	DLL_CLASS HawkeyeError SetTemporaryCellType (CellType* temp_cell);

	/// Return Values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eInvalidArgs - Invalid input celltype/Analysis definition(nullptr)/ Invalid Index
	///                eEntryNotFound - No Analysis/Cell type found
	//Deprecated
	DLL_CLASS HawkeyeError SetTemporaryAnalysisDefinitionFromExisting (uint16_t analysis_index);

	DLL_CLASS HawkeyeError SetTemporaryCellTypeFromExisting (uint32_t ct_index);

	/// Return Values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eNoneFound - If the temporary CellType / Analysis is not set
	DLL_CLASS HawkeyeError GetTemporaryAnalysisDefinition (AnalysisDefinition*& temp_definition);
	DLL_CLASS HawkeyeError GetTemporaryCellType (CellType*& temp_cell);


	/// Analysis Definition Management
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in
	///                eEntryNotFound/eNoneFound - analysis does not exist;
	///                eInvalidArgs - cannot modify / delete a factory-defined analysis
	///                eValidationFailed - Failed to update Info file/ Audit log
	///                eNoneFound - analysis does not exist.
	DLL_CLASS HawkeyeError GetFactoryAnalysisDefinitions (uint32_t& num_ad, AnalysisDefinition*& analyses);
	DLL_CLASS HawkeyeError GetUserAnalysisDefinitions (uint32_t& num_ad, AnalysisDefinition*& analyses);
	
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in
	///                eInvalidArgs - Invalid analysis
	///                eAlreadyExists - The given analysis definition already exists
	///                eStorageFault - Failed to update configuration file
	//Deprecated
	DLL_CLASS HawkeyeError AddAnalysisDefinition (AnalysisDefinition ad, uint16_t& ad_index);

	/// Return values: eSuccess
	///                eNotPermittedByUser - No user logged in.
	///                eEntryNotFound - analysis does not exist;
	//Deprecated
	DLL_CLASS HawkeyeError ModifyBaseAnalysisDefinition (AnalysisDefinition ad, bool clear_specializations);

	/// Return values: eSuccess
	///                eNotPermittedByUser
	///                eEntryNotFound - analysis does not exist.
	///                eStorageFault - Failed to write to Analysis.info file.
	///                eInvalidArgs - Some parameter is invalid.
	//Deprecated
	DLL_CLASS HawkeyeError RemoveAnalysisDefinition (uint16_t ad_index);

	/// Analysis Definition Specialization Management
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in.
	///                eEntryNotFound - analysis does not exist;
	DLL_CLASS HawkeyeError GetAnalysisForCellType (uint16_t ad_index, uint32_t ct_index, AnalysisDefinition*& ad);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eEntryNotFound - analysis does not exist;
	DLL_CLASS HawkeyeError SpecializeAnalysisForCellType (AnalysisDefinition ad, uint32_t ct_index);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eEntryNotFound - analysis does not exist;
	//Deprecated
	DLL_CLASS HawkeyeError IsAnalysisSpecializedForCellType (uint16_t ad_index, uint32_t ct_index, bool& is_specialized);	
	//Deprecated
	DLL_CLASS HawkeyeError RemoveAnalysisSpecializationForCellType (uint16_t ad_index, uint32_t ct_index);

	/// Instrument Configuration Export (users, cell types, analyses, ...)
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eInvalidArgs - Invalid input config file path/extension
	///                eStoragefault - System failed to get the configuration data
	///                eValidationFailed - RSA key not valid / failed to encrypt / failed to apply signature
	DLL_CLASS HawkeyeError ExportInstrumentConfiguration(const char* username, const char* password, const char * filename);

	/// Instrument Configuration Import / Export (users, cell types, analyses, ...)
	/// Importing will OVERWRITE ALL EXISTING CONFIGURATION.  BE VERY CERTAIN YOU WANT TO DO THIS.
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eFileNotFound - File not found or could not be created
	///                eValidationFailed - Import failed because file could not be validated 
	DLL_CLASS HawkeyeError ImportInstrumentConfiguration(const char* username, const char* password, const char * filename);

	//Exports the data(Meta data, Result binaries and images) for each result specified, along with configuration and log files.
	//The images to export for each result are based on the "eExportImage and export_nth_image" inputs.
	//eExportImages::FirstAndLastOnly - Only the first and last image will be exported.
	//eExportImages::All              - All available images will be exported.
	//eExportImages::ExportNthImage   - If all the images are available(i.e save_nth_image filtering is not applied during initial sample analysis)
	//                                  then only nth image will be exported, else all the available images will be exported.
	//Call backs:
	//1. Complete callback : Indicates the completion(Failure/success) of export data.
	//                       After this callback triggered, there will be no further export data operation.
	//                       This callback is also triggered when "CancelExportData" is requested.
	//2. Progress callback : Indicates export completion(Failure/success) of each result.
	//                       After this callback is triggered, still the export data will be in progress.
	//                       This callback can be nullptr, so there will be no indication after export completion of each result.
	/// Return values: eSuccess
	///                eNotPermittedByUser     - Logged in user lacks sufficient permissions
	///                eNotPermittedAtThisTime - Previous export or delete data operation is in progress
	///                eInvalidArgs            - Invalid input/nullptr
	///                eStorageFault           - Failed export images/result binaries/ Failed to Archive /Failed to save meta data
	///                eLowDiskSpace           - Low disk space.
	typedef void(*export_data_progress_callback)(HawkeyeError, uuid__t);
	typedef void(*export_data_completion_callback)(HawkeyeError, char*);
	DLL_CLASS HawkeyeError  ExportInstrumentData(const char* username, const char* password, 
												 uuid__t * rs_uuid_list,
                                                 uint32_t num_uuid,
                                                 const  char* export_location_directory,
                                                 eExportImages exportImages,
                                                 uint16_t export_nth_image,
                                                 export_data_completion_callback onExportCompletionCb,
                                                 export_data_progress_callback exportProgressCb = nullptr);



    // Accepts the request to cancel the export data operation, if export data is in progress.
	// On success return from this API, caller must wait for "export_data_completion_callback" callback, which confirms the successful completion of export data cancellation.
	/// Return values: eSuccess
	///                eNotPermittedAtThisTime - Export data is not in progress
	DLL_CLASS HawkeyeError CancelExportData();

	DLL_CLASS HawkeyeError  Export_Start(
		const char* username,
		const char* password,
		uuid__t* rs_uuid_list,
		uint32_t num_uuid,
		const  char* outPath,
		eExportImages exportImages,
		uint16_t export_nth_image);

	DLL_CLASS HawkeyeError  Export_NextMetaData(uint32_t index, uint32_t delayms);
	DLL_CLASS HawkeyeError  Export_IsStorageAvailable();
	DLL_CLASS HawkeyeError  Export_ArchiveData(const char* filename, char*& outname);
	DLL_CLASS HawkeyeError  Export_Cleanup(bool removeFile);


	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eNotSupported
	///**** NOT SUPPORTED*****
	//Deprecated
	DLL_CLASS HawkeyeError ImportInstrumentData(const char* import_file_location);


	/// BIOPROCESS MANAGEMENT
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eEntryNotFound - Bioprocess entry not found
	///                eStorageFault - Failed to update the configuration file
	//Deprecated
	DLL_CLASS HawkeyeError SetBioprocessActivation (const char* bioprocess_name, bool activated);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eAlreadyExists - Bioprocess already exists
	///                eEntryNotFound - Bioprocess entry not found
	///                eStorageFault - Unable to update configuration file
	///                eInvalidArgs - A parameter of the bioprocess definition is invalid
	//Deprecated
	DLL_CLASS HawkeyeError AddBioprocess (Bioprocess_t bioprocess);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eEntryNotFound - Bioprocess entry not found
	///                eStorageFault - Unable to update the configuration files
	//Deprecated
	DLL_CLASS HawkeyeError RemoveBioprocess (const char* bioprocess_name);

	/// QUALITY CONTROLS MANAGEMENT
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eAlreadyExists - QualityControl already exists
	///                eStorageFault - Failed to update info file
	DLL_CLASS HawkeyeError AddQualityControl(const char* username, const char* password, QualityControl_t qualitycontrol, const char* retiredQcName);

	/// SIGNATURE MANAGEMENT
	/// Signature definitions must be unique in both short and long text.
	/// Neither the short nor the long text field may be blank.
	/// Caller is responsible for proper Unicode normalization.
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eStorageFault- Failed to update the info file.
	///                eInvalidArgs - Invalid signature input(nullptr) or emtpy strings.
	///                eAlreadyExists - unable to add definition because the short or long text was not unique
	DLL_CLASS HawkeyeError AddSignatureDefinition(DataSignature_t* signature);

	/// Removes a signature definition from the list of available signatures.
	/// Existing instances of the signature (attached to results or other objects) are NOT REMOVED
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eEntryNotFound - unable to find signature definition matching signature_short_text
	DLL_CLASS HawkeyeError RemoveSignatureDefinition(char* signature_short_text, uint16_t short_text_len);

	/// Set the concentration calibration information.
	/// Host must provide the UUID of the work queue used to execute the sample data for the calibration.
	/// Timestamp will be assigned as the time this call executed.
	///
	/// Requires SERVICE permissions.
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eStorageFault - Failed to write calibration history
	DLL_CLASS HawkeyeError SetConcentrationCalibration (calibration_type calType, double slope, double intercept, uint32_t cal_image_count, uuid__t queue_id, uint16_t num_consumables, calibration_consumable* consumables);

	/// Set the size calibration information.
	/// Host must provide the UUID of the work queue used to execute the sample data for the calibration.
	/// Timestamp will be assigned as the time this call executed.
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eStorageFault - Failed to write calibration history
	//Deprecated
	DLL_CLASS HawkeyeError SetSizeCalibration(double slope, double intercept, uuid__t queue_id, uint16_t num_consumables, calibration_consumable* consumables);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eBusy - cannot start the operation unless the system is idle
	///                eNotPermittedAtThisTime - system is not able to start the process at this time (no reagents?, not running BF Dust Subtract work flow ?)
	///                eStageNotRegistered - Sample carrier registration is not performed.
	typedef void(*brightfield_dustsubtraction_callback)(BrightfieldDustSubtractWorkflow::eBrightfieldDustSubtractionState, ImageWrapper_t* dust_ref, uint16_t num_dust_images, ImageWrapper_t* source_dust_images);
	DLL_CLASS HawkeyeError StartBrightfieldDustSubtract(brightfield_dustsubtraction_callback on_status_change);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eBusy - cannot start the operation unless the system is idle
	///                eNotPermittedAtThisTime - process is not ready yet
	DLL_CLASS HawkeyeError AcceptDustReference(bool accepted);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions
	///                eNotPermittedAtThisTime - No BrightfieldDustSubtract is in progress to cancel.
	DLL_CLASS HawkeyeError CancelBrightfieldDustSubtract();

	/// Retrieve and Archive Instrument Logs
	/// All timestamps are in seconds since 1/1/1970 UTC.  Use '0' to indicate "from beginning of time" or "until end of time" as appropriate.
	/// Archiving / Clearing a log requires password verification by the current (elevated or higher) user.
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - logged in user lacks sufficient permissions
	///                eStorageFault - Failed to read log
	DLL_CLASS HawkeyeError RetrieveAuditTrailLog (uint32_t& num_entries, audit_log_entry*& log_entries);

	//Deprecated
	DLL_CLASS HawkeyeError RetrieveAuditTrailLogRange (uint64_t starttime, uint64_t endtime, uint32_t& num_entries, audit_log_entry*& log_entries);

	DLL_CLASS void WriteToAuditLog (const char* username, audit_event_type type, char* resource);
	
	DLL_CLASS HawkeyeError RetrieveInstrumentErrorLog (uint32_t& num_entries, error_log_entry*& log_entries);
	DLL_CLASS HawkeyeError RetrieveInstrumentErrorLogRange (uint64_t starttime, uint64_t endtime, uint32_t& num_entries, error_log_entry*& log_entries);
	DLL_CLASS HawkeyeError RetrieveSampleActivityLog (uint32_t& num_entries, sample_activity_entry*& log_entries);
	DLL_CLASS HawkeyeError RetrieveSampleActivityLogRange (uint64_t starttime, uint64_t endtime, uint32_t& num_entries, sample_activity_entry*& log_entries);

	/// Return values: eSuccess
	///                eNotPermittedByUser - logged in user lacks sufficient permissions
	DLL_CLASS HawkeyeError RetrieveCalibrationActivityLog (calibration_type cal_type, uint32_t& num_entries, calibration_history_entry*& log_entries);
	DLL_CLASS HawkeyeError RetrieveCalibrationActivityLogRange (calibration_type cal_type, uint64_t starttime, uint64_t endtime, uint32_t& num_entries, calibration_history_entry*& log_entries);

	/// Return values: eSuccess
	///                eNotPermittedByUser - logged in user lacks sufficient permissions
	///                eValidationFailed - unable to validate logged-in user's password
	///                eStorageFault - error while accessing log file

	/// Archives the log prior to a given timestamp. User must provide
	/// their password for verification.API will inform the Host of the
	/// selected archive location.
	//Deprecated
	DLL_CLASS HawkeyeError ArchiveAuditTrailLog(uint64_t archive_prior_to_time, char* verification_password, char*& archive_location);
	//Deprecated
	DLL_CLASS HawkeyeError ArchiveInstrumentErrorLog(uint64_t archive_prior_to_time, char* verification_password, char*& archive_location);

	DLL_CLASS HawkeyeError ArchiveSampleActivityLog(uint64_t archive_prior_to_time, char* verification_password, char*& archive_location);

	/// Return values: eSuccess
	///                eNotPermittedByUser - logged in user lacks sufficient permissions
	///                eStorageFault - error while accessing log file

	/// Read back an archived log file.Log file must be one produced by the
	/// instrument or it will fail the integrity checks.API cannot be used to
	/// ALTER a log file.
	//Deprecated
	DLL_CLASS HawkeyeError ReadArchivedAuditTrailLog(char* archive_location, uint32_t& num_entries, audit_log_entry*& log_entries);
	//Deprecated
	DLL_CLASS HawkeyeError ReadArchivedInstrumentErrorLog(char* archive_location, uint32_t& num_entries, error_log_entry*& log_entries);

	DLL_CLASS HawkeyeError ReadArchivedSampleActivityLog(char* archive_location, uint32_t& num_entries, sample_activity_entry*& log_entries);

	/// Return values: eSuccess
	///                eNotPermittedByUser - logged in user lacks sufficient permissions
	///                eValidationFailed - unable to validate logged - in user's password
	///                eEntryNotFound - log file failed integrity check and should not be trusted.
	///                eStorageFault - Error while accessing log file
	DLL_CLASS HawkeyeError ClearCalibrationActivityLog(calibration_type cal_type, uint64_t archive_prior_to_time, char* verification_password, bool clearAllACupData);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Elevated or higher
	//Deprecated
	DLL_CLASS HawkeyeError ClearExportDataFolder(char* optional_subfolder, char* confirmation_password);

	/*********************************************************************************************************************************
	* Normal-user Interface
	* These functions require a logged-in user with permissions "eNormal" or higher.
	*********************************************************************************************************************************/

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user does not have required permission
	///                eInvalidArgs - Can't change password for built-in accounts
	///                eNotPermittedAtThisTime -Failed to update user configuration
	///                eValidationFailed - Invalid password/ password does not meet criteria
	///                eStorageFault - Failed to update the configuration
	DLL_CLASS HawkeyeError ChangeMyPassword (const char* oldpassword, const char* newpassword);
	
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user does not have required permission
	///                eValidationFailed - Invalid password
	DLL_CLASS HawkeyeError ValidateMe (const char* password);

	DLL_CLASS HawkeyeError ValidateUserCredentials(const char* username, const char* password);

	DLL_CLASS HawkeyeError ValidateLocalAdminAccount(const char* username, const char* password);


	typedef void(*sample_status_callback)(SampleDefinition*);
	typedef void(*worklist_completion_callback)(uuid__t /*work queue record identifier*/);
	typedef void(*sample_image_result_callback)(SampleDefinition*,
	                                            uint16_t           /* image sequence number */,
	                                            ImageSetWrapper_t* /* image */, 
	                                            BasicResultAnswers /* cumulative */,
	                                            BasicResultAnswers /* this_image */);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eBusy - An existing work queue is already in progress.
	///                eNotPermittedAtThisTime - System health is not okay
	///                eInvalidArgs - One or more items in the work queue are invalid (malformed or do not match hardware configuration)
	///                eHardwarefault - Insufficient disk space/ Reagent pack error
	DLL_CLASS HawkeyeError SetWorklist (const Worklist& wl);

	/// Sets the preference for the type of images returned in the work queue image result callback.
	///   Default value is eImageOutputType::eImageAnnotated
	///   Should be set prior to calling StartProcessing, but may be changed during analysis.
	///   Setting is retained between work queues, but NOT across DLL instances.
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eInvalidArgs - One or more items in the work queue are invalid (malformed or do not match hardware configuration)
	DLL_CLASS HawkeyeError SetImageOutputTypePreference (eImageOutputType image_type);

	DLL_CLASS HawkeyeError SaveSampleSetTemplate (const SampleSet& ss);
	DLL_CLASS HawkeyeError GetSampleSetTemplateList (uint32_t skip, uint32_t take, SampleSet*& sampleSets, uint32_t& numSampleSets, uint32_t& totalSampleSetsAvailable);
	DLL_CLASS HawkeyeError GetSampleSetTemplateAndSampleList (uuid__t uuid, SampleSet*& sampleSet);
	DLL_CLASS HawkeyeError GetSampleSetAndSampleList (const uuid__t uuid, SampleSet*& sampleSet);
	DLL_CLASS HawkeyeError DeleteSampleSetTemplate (uuid__t uuid);

	DLL_CLASS HawkeyeError GetSampleSetList(
		eFilterItem filterItem,
		uint64_t start,
		uint64_t end,
		char* username,
		char* nameSearchString,
		char* tagSearchString,
		char* cellTypeOrQualityControlName,
		uint32_t skip,
		uint32_t take,
		uint32_t& totalSampleSetsAvailable,
		SampleSet*& sampleSets,
		uint32_t& numSampleSets);

	DLL_CLASS void FreeSampleSet (SampleSet* list, uint32_t num_samplesets);

	DLL_CLASS HawkeyeError GetSampleDefinitionBySampleId (uuid__t sampleDataUuid, SampleDefinition*& sampleDef);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eNotPermittedAtThisTime - No work queue is active.
	///                eInvalidArgs - One or more items in the work queue are invalid (malformed or do not match hardware configuration)
	DLL_CLASS HawkeyeError AddSampleSet (const SampleSet& ss);

//TODO: document the error cases...
	DLL_CLASS HawkeyeError CancelSampleSet (uint16_t sampleSetIndex);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eNotPermittedAtThisTime - Sample disposal tray is filled/ Carousel not present.
	///                eBusy - An existing work queue/work flow operation is already in progress
	///                eInvalidArgs - Callbacks are not set/ Invalid/work queue/Empty plate work queue.
	///                ePlateNotFound -Plate not present
	///                eStageNotRegistered - Sample carrier registration is not performed.
	DLL_CLASS HawkeyeError StartProcessing (const char* username, const char* password, 
		                                    sample_status_callback onSampleStatus,
	                                        sample_image_result_callback onSampleImageProcessed,
	                                        sample_status_callback onSampleComplete,
	                                        worklist_completion_callback onWorklistComplete);

	DLL_CLASS void FreeSampleDefinition (SampleDefinition*, uint32_t numSamples);

	/// Retrieve work queue status.  Note that the work queue may be re-ordered from the original submission
	///  due to: carousel requiring a different starting location; "additional samples" being discovered.
	/// Return values: eSuccess
	//DLL_CLASS HawkeyeError GetSystemStatus (eSystemStatus systemStatus);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eNotPermittedAtThisTime - Work Queue is not running/ empty
	///                eNoneFound - No item in the Queue 
	DLL_CLASS HawkeyeError GetCurrentSample (SampleDefinition*& sd);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eNotPermittedAtThisTime -Work queue is not in progress
	///                eSoftwareFault - Invalid work queue item index
	DLL_CLASS HawkeyeError PauseProcessing(const char* username, const char* password);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eNotPermittedAtThisTime -Work queue is not in progress
	DLL_CLASS HawkeyeError StopProcessing(const char* username, const char* password);

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eNotPermittedAtThisTime -Work queue is not in progress/ Plate/Carousel is not present.
	DLL_CLASS HawkeyeError ResumeProcessing(const char* username, const char* password);


	DLL_CLASS const char* GetErrorAsStr (HawkeyeError he);
	DLL_CLASS const char* GetPermissionLevelAsStr (UserPermissionLevel permissions);
	DLL_CLASS const char* GetReagentDecontaminateFlowCellStatusAsStr (eDecontaminateFlowCellState status);
	DLL_CLASS const char* GetReagentDrainStatusAsStr(eDrainReagentPackState status);
	DLL_CLASS const char* GetReagentFlushFlowCellStatusAsStr (eFlushFlowCellState status);
	DLL_CLASS const char* GetReagentPackLoadStatusAsStr (ReagentLoadSequence status);
	DLL_CLASS const char* GetReagentPackUnloadStatusAsStr (ReagentUnloadSequence status);
	DLL_CLASS const char* GetSystemStatusAsStr (eSystemStatus status);
	DLL_CLASS const char* GetSampleStatusAsStr (eSampleStatus sysStatus);
	DLL_CLASS const char* GetCleanFluidicsStatusAsStr(eFlushFlowCellState status);

	/// Indicate that the sample tube discard tray has been emptied.  This will reset the
	///  internal counter in the DLL.  Failure to regularly empty the discard tray risks 
	///  a mechanical jam on the system, so the system will refuse to execute samples from the 
	///  Carousel if the remaining capacity reaches zero (see SystemStatus structure).
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions 
	DLL_CLASS HawkeyeError SampleTubeDiscardTrayEmptied();

	/// When system is IDLE, request that the sample stage move to a position where the plate/carousel is easily accessed
	///  by a user.  Carousel will MAINTAIN THE CURRENT ROTATIONAL POSITION.  Plate will ROTATE TO A KNOWN ORIENTATION.
	///
	/// Return values: eSuccess - System ejected the sample stage
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eHardwareFault - the system is experiencing a fault which prevents execution of this request
	DLL_CLASS HawkeyeError EjectSampleStage(const char* username, const char* password);		// rotates the stage so that A1 is in the back-left position, and row-column orientation viewed from above is as presented on the sample definition screen is 
	DLL_CLASS HawkeyeError SampleStageLoadUnload(const char* username, const char* password, int32_t angle);	// rotates the stage to a variable theta angle to allow easier access by mechanical automation plate handlers; position is the degree angle desired (-359 to +359)

	/// When system is IDLE, request that the CAROUSEL be rotated to the next position.  This will fail if:
	///    - Carousel is not present
	///    - Sample stage has not been homed
	///    - System is not idle
	///    - Sample tube is detected in the active position (system will not intentionally discard a tube that it has not emptied)
	///
	/// Return values: eSuccess - System has rotated the carousel and  "tubeNum" has been updated with the current position
	///                eNotPermittedByUser - Logged in user lacks sufficient permissions / no user logged in
	///                eNotPermittedAtThisTime - Carousel is not detected or Sample Tube is detected.
	///                eHardwareFault - the system is experiencing a fault which prevents execution of this request
	///                eStageNotRegistered - Sample carrier registration is not performed.
	DLL_CLASS HawkeyeError RotateCarousel(SamplePosition& tubeNum);

	/// Return values: eSuccess
	///                eNotPermittedAtThisTime - Reagent pack is busy / in use
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in.
	///
	///  Callback functions MUST be thread-safe and MUST return promptly.
	///  Sequence is complete when the reported status reaches one of the designated termination states.
	typedef void(*reagent_load_status_callback)(ReagentLoadSequence);
	typedef void(*reagent_unload_status_callback)(ReagentUnloadSequence);
	typedef void(*reagent_load_complete_callback)(ReagentLoadSequence);
	typedef void(*reagent_unload_complete_callback)(ReagentUnloadSequence);

	DLL_CLASS HawkeyeError UnloadReagentPack (ReagentContainerUnloadOption* UnloadActions, uint16_t nContainers, reagent_unload_status_callback onUnloadStatusChange, reagent_unload_complete_callback onUnloadComplete);
	DLL_CLASS HawkeyeError LoadReagentPack (reagent_load_status_callback onLoadStatusChange, reagent_load_complete_callback onLoadComplete);

	/// During the reagent load sequence, single-fluid containers will need to have their location(s) specified.
	/// This function must be called for each container when the Load Sequence is in the state ReagentLoadSequence::eWaitingOnContainerLocation;
	/// Return values: eSuccess  -  locations accepted and load procedure continuing.
	///                eNotPermittedAtThisTime - function may only be called when the Reagent Load process is in the correct state.
	///                eInvalidArgs - attempted to set a location other than "main bay" for a multi-fluid reagent container; attempted to set a location 
	///                               other than "door left" or "door right" for a single-fluid reagent container.
	///                eEntryNotFound - No match found for container ID specified in call
	DLL_CLASS HawkeyeError SetReagentContainerLocation (ReagentContainerLocation& location);


	typedef void(*flowcell_flush_status_callback)(eFlushFlowCellState);
	typedef void(*flowcell_decontaminate_status_callback)(eDecontaminateFlowCellState);
	typedef void(*prime_reagentlines_callback)(ePrimeReagentLinesState);
	typedef void(*purge_reagentlines_callback)(ePurgeReagentLinesState);
	typedef void(*drain_reagentpack_callback)(eDrainReagentPackState);
	
	/// Automated sequence to flush the flow cell fluid path and remove fluid from the lines.
	/// Can only be done when the system is idle.  Host will provide a callback function which
	/// will be used to notify the host of the sequence state and completion.
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in.
	///                eBusy - system must be idle
	///                eNotPermittedAtThisTime - system cannot run this sequence now (no reagents?)
	DLL_CLASS HawkeyeError StartFlushFlowCell(flowcell_flush_status_callback on_status_change);
	DLL_CLASS HawkeyeError StartCleanFluidics(flowcell_flush_status_callback on_status_change);
	
	/// Automated sequence to decontaminate the flow cell using onboard reagents.
	/// Can only be done when the system is idle.  Host will provide a callback function which
	/// will be used to notify the host of the sequence state and completion.
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in.
	///                eBusy - system must be idle
	///                eNotPermittedAtThisTime - system cannot run this sequence now (no reagents?)
	///                eStageNotRegistered - Sample carrier registration is not performed.
	DLL_CLASS HawkeyeError StartDecontaminateFlowCell(flowcell_decontaminate_status_callback on_status_change);

	/// Automated sequence to prime the fluid path between the reagent containers and the valves.
	/// Can only be done when the system is idle.  Host will provide a callback function which
	/// will be used to notify the host of the sequence state and completion.
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in.
	///                eBusy - system must be idle
	///                eNotPermittedAtThisTime - system cannot run this sequence now (no reagents?)
	DLL_CLASS HawkeyeError StartPrimeReagentLines(prime_reagentlines_callback on_status_change);

	/// Automated sequence to drain the containers in the reagent pack into  the waste container.
	/// Can only be done when the system is idle.  Host will provide a callback function which
	/// will be used to notify the host of the sequence state and 8bit value for the valve position. 
	/// The valve position can be obtain from reagent status form GetReagentContainerStatus().
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in.
	///                eBusy - system must be idle
	///                eNotPermittedAtThisTime - system cannot run this sequence now (no reagents?)
	DLL_CLASS HawkeyeError StartDrainReagentPack(drain_reagentpack_callback on_status_change, uint8_t valve_position);

	/// Automated sequence to purge the fluid path between the reagent containers and the valves.
	/// Can only be done when the system is idle.  Host will provide a callback function which
	/// will be used to notify the host of the sequence state and completion.
	///
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in.
	///                eBusy - system must be idle
	///                eNotPermittedAtThisTime - system cannot run this sequence now (no reagents?)
	DLL_CLASS HawkeyeError StartPurgeReagentLines(purge_reagentlines_callback on_status_change);
	DLL_CLASS HawkeyeError CancelPurgeReagentLines();

	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in.
	///                eNotPermittedAtThisTime - WorkFlow is not in progress
	DLL_CLASS HawkeyeError CancelFlushFlowCell();
	DLL_CLASS HawkeyeError CancelDecontaminateFlowCell();
	DLL_CLASS HawkeyeError CancelPrimeReagentLines();
	DLL_CLASS HawkeyeError CancelDrainReagentPack();
	DLL_CLASS HawkeyeError CancelCleanFluidics();

	/// Return values: eSuccess
	///                eNotPermittedAtThisTime - Workflow is not in progress.
	DLL_CLASS HawkeyeError GetFlushFlowCellState(eFlushFlowCellState& state);
	DLL_CLASS HawkeyeError GetDecontaminateFlowCellState(eDecontaminateFlowCellState& state);
	DLL_CLASS HawkeyeError GetPrimeReagentLinesState(ePrimeReagentLinesState& state);
	DLL_CLASS HawkeyeError GetDrainReagentPackState(eDrainReagentPackState& state);
	DLL_CLASS HawkeyeError GetCleanFluidicsState(eFlushFlowCellState& state);

	/// Get Definitions for all cell types available on instrument.
	/// Used for display purposes.
	/// Return values: eSuccess
	///                eNoneFound - no cell types defined in configuration
	///                eNotPermittedByUser - No user is presently logged in 
	DLL_CLASS HawkeyeError GetAllCellTypes (uint32_t& num_celltypes, CellType*& celltypes);

	/// Get Definitions for all analyses available on instrument.
	/// Used for display purposes.
	/// Return values: eSuccess
	///                eNotPermittedByUser - No user is presently logged in 
	///                eNoneFound - None found
	DLL_CLASS HawkeyeError GetAllAnalysisDefinitions (uint32_t& num_analyses, AnalysisDefinition*& analyses);

	/// Get list of defined bioprocesses
	/// Return values: eSuccess
	///                eNotPermittedByUser - Logged-in user lacks sufficient permissions / no user logged in.
	///                eNoneFound - No entries found
	
	//Deprecated
	DLL_CLASS HawkeyeError GetBioprocessList(Bioprocess_t*& bioprocesses, uint32_t& num_bioprocesses);
	//Deprecated
	DLL_CLASS HawkeyeError GetActiveBioprocessList (Bioprocess_t*& bioprocesses, uint32_t& num_bioprocesses);
	//Deprecated
	DLL_CLASS void FreeListOfBioprocess(Bioprocess_t* list, uint32_t n_items);

	DLL_CLASS HawkeyeError GetQualityControlList (const char* username, const char* password, bool allFlag, QualityControl_t*& qualitycontrols, uint32_t& num_qcs);

	DLL_CLASS void FreeListOfQualityControl(QualityControl_t* list, uint32_t n_items);

	/// Get the current concentration calibration information including date of last calibration and the UUID of the queue used for running the calibration.
	///
	/// Return values: eSuccess
	///                eEntryNotFound          - No calibration entry found
	//Deprecated
	DLL_CLASS HawkeyeError GetConcentrationCalibrationStatus (double& slope, double& intercept, uint32_t& cal_image_count, uint64_t& last_calibration_time, uuid__t& queue_id);
	//Deprecated
	DLL_CLASS HawkeyeError GetSizeCalibrationStatus (double& slope, double& intercept, uint64_t& last_calibration_time, uuid__t& queue_id);

	/// Get set of analysis parameter names supported by the image analysis system
	/// Return values: eSuccess
	///                eNotPermittedByUser - No user is presently logged in 
	//Deprecated
	DLL_CLASS HawkeyeError GetSupportedAnalysisParameterNames (uint32_t& nparameters, char**& parameters);

	/// Return values: eSuccess
	///                eNotPermittedByUser - No user is presently logged in 
	///                eEntryNotFound - None found.
	//Deprecated
	DLL_CLASS HawkeyeError GetSupportedAnalysisCharacteristics (uint32_t& ncharacteristics, Hawkeye::Characteristic_t*& characteristics);
	DLL_CLASS char* GetNameForCharacteristic (Hawkeye::Characteristic_t c);

	DLL_CLASS void FreeListOfResultRecord (ResultRecord* list, uint32_t n_items);
	DLL_CLASS void FreeListOfResultSummary (ResultSummary* list, uint32_t n_items);
	DLL_CLASS void FreeListOfImageRecord (ImageRecord* list, uint32_t n_items);
	DLL_CLASS void FreeListOfImageSetRecord (SampleImageSetRecord* list, uint32_t n_items);
	DLL_CLASS void FreeListOfSampleRecord (SampleRecord* list, uint32_t n_items);
	DLL_CLASS void FreeListOfWorklistRecord (WorklistRecord* list, uint32_t n_items);
	DLL_CLASS void FreeDetailedResultMeasurement (DetailedResultMeasurements* meas);

	/// Retrieve one or more Work Queue Records / Sample Records / Image Set Records / Image Records / Result Records.
	/// "start" and "end" are in seconds since 1/1/1970 00:00:00 UTC
	///     A ZERO in either field indicates "beginning of time" or "end of time" respectively
	/// "username" indicates the user of interest
	///     A NULL value for username indicates "all users"
	/// RetrieveXxxList will only return the items which were retrieved successfully (list_size may not equal retrieved_size)
	///   The caller should be sure to check the returned set against the requested set - failure mode for any missing item 
	///   should be determined by calling the RetrieveXxx(...) function explicitly and checking the return value.
	
	/// Return Values : eSuccess
	///                 eNotPermittedByUser - User does not have required permission
	///                 eStorageFault - Software failed to retrieve the data 
	///                 eNoneFound -No records found
	DLL_CLASS HawkeyeError RetrieveWorklist (uuid__t id, WorklistRecord*& rec);
	DLL_CLASS HawkeyeError RetrieveWorklists(uint64_t start, uint64_t end, char* username, WorklistRecord*& reclist, uint32_t& list_size);
	DLL_CLASS HawkeyeError RetrieveWorklistList(uuid__t* ids, uint32_t list_size, WorklistRecord*& recs, uint32_t& retrieved_size);
	
	DLL_CLASS HawkeyeError RetrieveSampleRecord (uuid__t id, SampleRecord*& rec);
	DLL_CLASS HawkeyeError RetrieveSampleRecords(uint64_t start, uint64_t end, char* username, SampleRecord*& reclist, uint32_t& list_size);
	DLL_CLASS HawkeyeError RetrieveSampleRecordList(uuid__t* ids, uint32_t list_size, SampleRecord*& recs, uint32_t& retrieved_size);
	
	DLL_CLASS HawkeyeError RetrieveSampleImageSetRecord (uuid__t id, SampleImageSetRecord*& rec);
	DLL_CLASS HawkeyeError RetrieveSampleImageSetRecords(uint64_t start, uint64_t end, char* username, SampleImageSetRecord*& reclist, uint32_t& list_size);
	DLL_CLASS HawkeyeError RetrieveSampleImageSetRecordList(uuid__t* ids, uint32_t list_size, SampleImageSetRecord*& recs, uint32_t& retrieved_size);
	
	//Deprecated
	DLL_CLASS HawkeyeError RetrieveImageRecords(uint64_t start, uint64_t end, char* username, ImageRecord*& reclist, uint32_t& list_size);
	//Deprecated
	DLL_CLASS HawkeyeError RetrieveImageRecord (uuid__t id, ImageRecord*& rec);

	DLL_CLASS HawkeyeError RetrieveImageRecordList(uuid__t* ids, uint32_t list_size, ImageRecord*& recs, uint32_t& retrieved_size);

	DLL_CLASS HawkeyeError RetrieveResultRecord (uuid__t id, ResultRecord*& rec);
	DLL_CLASS HawkeyeError RetrieveResultRecords (uint64_t start, uint64_t end, char* username, ResultRecord*& reclist, uint32_t& list_size);
	DLL_CLASS HawkeyeError RetrieveResultRecordList (uuid__t* ids, uint32_t list_size, ResultRecord*& recs, uint32_t& retrieved_size);

	DLL_CLASS HawkeyeError RetrieveResultSummaryRecord (uuid__t id, ResultSummary*& rec);
	DLL_CLASS HawkeyeError RetrieveResultSummaryRecords (uint64_t start, uint64_t end, char* username, ResultSummary*& reclist, uint32_t& list_size);
	DLL_CLASS HawkeyeError RetrieveResultSummaryRecordList (uuid__t* ids, uint32_t list_size, ResultSummary*& recs, uint32_t& retrieved_size);

	
	/// Return Values : eSuccess
	///                 eNotPermittedByUser - User does not have required permission
	///                 eStorageFault - Software failed to retrieve the data 
	///                 eEntryNotFound - Record not found
	///                 eValidationFailed - Image conversion failed.
	DLL_CLASS HawkeyeError RetrieveImage (uuid__t id, ImageWrapper_t*& img);
	DLL_CLASS HawkeyeError RetrieveBWImage (uuid__t image_id, ImageWrapper_t*& img);
	DLL_CLASS HawkeyeError RetrieveAnnotatedImage (uuid__t result_id, uuid__t image_id, ImageWrapper_t*& img);

	/// Return Values : eSuccess
	///                 eNotPermittedByUser - User does not have required permission
	///                 eStorageFault - Software failed to retrieve the data 
	///                 eEntryNotFound - Record/s not found
	DLL_CLASS HawkeyeError RetrieveDetailedMeasurementsForResultRecord (uuid__t id, DetailedResultMeasurements*& measurements);

	/// Return Values : eSuccess
	///                 eNotPermittedByUser -User does not have required permission 
	///                 eEntryNotFound - No record found
	///                 eInavlidArgs - Invalid Sample UUID or Invalid CellType/Analysis Index 
	///                 eStorageFault - Software failed to retrieve/Save the data
	typedef void(*sample_analysis_callback)(HawkeyeError, uuid__t /*sample_id*/, ResultRecord* /*Analysis Data*/);
	DLL_CLASS HawkeyeError ReanalyzeSample(uuid__t sample_id, uint32_t celltype_index, uint16_t analysis_index, bool from_images, sample_analysis_callback onSampleComplete);


	/// Retrieve processed histogram data for a particular measurement within a result.  
	///  "POI" - true for POI, false for GP
	///  "bin_count" number of bins you wish to see the values split into. Bins will be created of even width and will be reported with the bin center value indicated.
	/// Return values: eSuccess
	///                eNotPermittedByUser - User does not have required permission
	///                eEntryNotFound - A result record matching that UUID was not found
	///                eStorageFault - Failed to retrieve the Image Analysis data  
	///                eNoneFound - Image blob data matching to the given measurement not found
	///                eValidationFailed - Image blob data not found for the given result record.
	DLL_CLASS HawkeyeError RetrieveHistogramForResultRecord(uuid__t id, bool POI, Hawkeye::Characteristic_t measurement, uint8_t& bin_count, histogrambin_t*& bins);
	DLL_CLASS HawkeyeError FreeHistogramBins(histogrambin_t* bins);


	/// Get Sample records for all samples ran against the specified bioprocess/ quality control.
	/// The bioprocess / quality control does NOT have to be active
	/// Return values: eSuccess		
	///                eNotPermittedByUser - User does not have required permission
	///                eNoneFound - No records found/No qc/bp records found
	///                eStorageFault - Software failed to retrieve the data 
	//Deprecated
	DLL_CLASS HawkeyeError RetrieveSampleRecordsForBioprocess(const char* bioprocess_name, SampleRecord*& reclist, uint32_t& list_size);

	DLL_CLASS HawkeyeError RetrieveSampleRecordsForQualityControl(const char* QC_name, SampleRecord*& reclist, uint32_t& list_size);

	///SIGNATURES
	/// Return values: eSuccess
	///                eNotPermittedByUser - User does not have required permission
	///                eNoneFound - No Signature found
	DLL_CLASS HawkeyeError RetrieveSignatureDefinitions(DataSignature_t*& signatures, uint16_t& num_signatures);
	
	/// Attach a signature to a Result Record.  THIS IS A PERMANANT ALTERATION - SIGNATURES CANNOT BE REMOVED ONCE ADDED
	/// Return values: eSuccess
	///                eNotPermittedByUser - User does not have required permission
	///                eEntryNotFound - No result record exist with the given UUID
	///                eStorageFault - Failed to apply signature
	///                eInvalidArgs - No signature definition matching to "signature_short_text"
	DLL_CLASS HawkeyeError SignResultRecord(uuid__t record_id, char* signature_short_text, uint16_t short_text_len);

	/// Returns the root folder used for the export - this is intended to be a network-accessible folder which can be used by remote process
	/// equipment if the instrument is on a network.  It is READ-ONLY from the outside world.
	/// Additional (user) folders may be underneath.
	/// Return values: eSuccess
	///                eNotPermittedAtThisTime - No user is presently logged in 
	//Deprecated
	DLL_CLASS HawkeyeError GetRootFolderForExportData(char*& folder_location);

	/// Frees the bright field image and FL image array in ImageSetWrapper_t.
	DLL_CLASS void FreeImageSetWrapper(ImageSetWrapper_t*& image_set_wrapper, uint16_t num_image_set_wrapper);

	/// Frees the image data array in ImageWrapper_t.
	DLL_CLASS void FreeImageWrapper(ImageWrapper_t*& image_wrapper, uint16_t num_image_wrapper);

	/// Frees the focus data array and final focused image in AutofocusResults.
	DLL_CLASS void FreeAutofocusResults(AutofocusResults*& results, uint8_t num_result);

	/// Frees the audit log entries in audit_log_entry structure.
	DLL_CLASS void FreeAuditLogEntry(audit_log_entry* entries, uint32_t num_entries);

	/// Frees the work list and sample entries in worklist_sample_entry structure.
	// @todo verify this can be remove & delete DLL_CLASS void FreeWorklistActivityEntry (worklist_sample_entry* entries, uint32_t num_entries);

	/// Frees the sample activity entries in sample_activity_entry structure.
	DLL_CLASS void FreeSampleActivityEntry(sample_activity_entry* entries, uint32_t num_entries);

	/// Frees the calibration history entries in calibration_history_entry structure.
	DLL_CLASS void FreeCalibrationHistoryEntry(calibration_history_entry* entries, uint32_t num_entries);

	/// Frees the error log entries in error_log_entry structure.
	DLL_CLASS void FreeErrorLogEntry(error_log_entry* entries, uint32_t num_entries);

	/// Frees the calibration consumable entries in calibration_consumable structure.
	//Deprecated
	DLL_CLASS void FreeCalibrationConsumable(calibration_consumable* cc, uint32_t num_cc);

	/// Frees the long and short text in DataSignature_t
	DLL_CLASS void FreeDataSignature(DataSignature_t* signatures, uint16_t num_signatures);

	/// Frees the DataSignature_t and user_name in DataSignatureInstance_t
	//Deprecated
	DLL_CLASS void FreeDataSignatureInstance(DataSignatureInstance_t* signatures, uint16_t num_signatures);

	/// Deletes Work Queue record, Sample Record data.
	/// If retain_results_and_first_image is 'false' Then deletes the complete record data (Work Queue record, Sample Record, Sample Image Set Record and Result Record)
	/// If retain_results_and_first_image is 'true' Then deletes all the images, retaining the first image and result record.
	/// After each record delete completion, HawkeyeLogic triggers a callback to UI with deletion status and UUID of the record.
	typedef void(*delete_results_callback)(HawkeyeError, uuid__t);

	/// Return values:
	///               eSuccess - Success
	///               eNotPermittedByUser     - User does not have the permission.
	///               eNotPermittedAtThisTime - Export Data is in progress 
	///               eInvalidArgs            - No UUID/s passed to delete.
	///               eEntryNotFound          - Record with the given UUID not found
	///               eStorageFault           - Failed to delete record.
	DLL_CLASS HawkeyeError DeleteSampleRecord(const char* username, const char* password, uuid__t * wqi_uuidlist, uint32_t num_uuid, bool retain_results_and_first_image, delete_results_callback onDeleteCompletion);

	/// Deletes Result Record data (allows removal of reanalyses).
	/// If "cleanup_if_deletinglastresult" is true AND one of the indicated result record IDs is the final result record for a sample, 
	///  then the images and sample record will also be removed.
	//Deprecated
	DLL_CLASS HawkeyeError DeleteResultRecord(uuid__t * rr_uuidlist, uint32_t num_uuid, bool cleanup_if_deletinglastresult, delete_results_callback onDeleteCompletion);
	
	DLL_CLASS HawkeyeError ValidateActiveDirConfig(ActiveDirectoryConfig cfg, const char* adminGroup, const char* uName, const char* password, bool& valid);

	DLL_CLASS HawkeyeError SetActiveDirConfig(ActiveDirectoryConfig cfg);
	DLL_CLASS HawkeyeError GetActiveDirConfig(ActiveDirectoryConfig*& cfg);
	DLL_CLASS void FreeActiveDirConfig(ActiveDirectoryConfig* cfg);

	DLL_CLASS HawkeyeError SetActiveDirectoryGroupMaps (ActiveDirectoryGroup* maps, uint32_t count);
	DLL_CLASS HawkeyeError GetActiveDirectoryGroupMaps (ActiveDirectoryGroup*& maps, uint32_t& retrieved_count);
	DLL_CLASS void FreeActiveDirGroupMaps (ActiveDirectoryGroup* maps, uint32_t count);

	DLL_CLASS HawkeyeError SetDBConfig (DBConfig cfg);
	DLL_CLASS HawkeyeError GetDBConfig (DBConfig*& cfg);
	DLL_CLASS void FreeDBConfig (DBConfig* cfg);
	DLL_CLASS HawkeyeError SetDbBackupUserPassword( const char* password );

	DLL_CLASS HawkeyeError SetSMTPConfig (SMTPConfig cfg);
	DLL_CLASS HawkeyeError GetSMTPConfig (SMTPConfig*& cfg);
	DLL_CLASS void FreeSMTPConfig (SMTPConfig* cfg);

	DLL_CLASS HawkeyeError SetAutomationSettings (AutomationConfig cfg);
	DLL_CLASS HawkeyeError GetAutomationSettings (AutomationConfig*& cfg);
	DLL_CLASS void FreeAutomationSettings (AutomationConfig* cfg);
	
	DLL_CLASS bool SystemHasData();

	/// Scheduled Export Functions
	///
	DLL_CLASS HawkeyeError AddScheduledExport(ScheduledExport scheduled_export, uuid__t *uuid);
	DLL_CLASS HawkeyeError EditScheduledExport(ScheduledExport scheduled_export);
	DLL_CLASS HawkeyeError DeleteScheduledExport(uuid__t uuid);
	DLL_CLASS HawkeyeError GetScheduledExports(eScheduledExportType export_type, ScheduledExport*& scheduled_exports, uint32_t& count);
	DLL_CLASS HawkeyeError FreeListOfScheduledExports(ScheduledExport* scheduled_exports, uint32_t count);

	DLL_CLASS void ShutdownOrReboot (ShutdownOrRebootEnum operation);
	DLL_CLASS HawkeyeError DeleteCampaignData();
	DLL_CLASS HawkeyeError SetOpticalHardwareConfig(OpticalHardwareConfig type);
	DLL_CLASS OpticalHardwareConfig GetOpticalHardwareConfig();
};
