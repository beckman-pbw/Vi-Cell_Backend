#pragma once

#include <stdint.h>

#include <boost/asio.hpp>
#include <boost/thread.hpp>

#include "stdafx.h"

#include "Camera.hpp"
#include "Camera_Basler.hpp"
#include "CarouselController.hpp"
#include "ControllerBoardInterface.hpp"
#include "FocusController.hpp"
#include "HawkeyeConfig.hpp"
#include "ImageProcessing.hpp"
#include "LedControllerBoardInterface.hpp"
#include "PlateController.hpp"
#include "ReagentController.hpp"
#include "Rfid.hpp"
#include "SampleRunList.hpp"
#include "SyringePump.hpp"
#include "WorkQueueDLL.hpp"


class BusinessObject
{
public:
    typedef struct
    {
        int32_t sharpness;
        int32_t position;
        uint32_t filenum;
    } SharpnessData_t;

	BusinessObject();
	virtual ~BusinessObject();

	bool init();
	bool doSampleRunList (std::string runFile);
	bool doWorkflow (std::string runFile);
	bool doCommandLine (std::string cmdline);
    bool doCommand (std::string cmd, std::vector<std::string> strParams);
	void quit();
	std::shared_ptr<ControllerBoardInterface>& BusinessObject::getControllerBoardInterface() { return pCBI_; }
	uint32_t getNumImages() { return imageCnt_; }
	bool readConfiguration (const std::string& configuration_file, boost::system::error_code& ec);
	bool createDataDirectories (uint32_t imageCnt, std::string subdir);
	bool getDataPath (size_t index, std::string& dataPath);
	bool getDataType (size_t index, std::string& dataType);
	bool autofocus (uint32_t& focusPosition);
    bool autofocusForAnalysis (uint32_t startingPosition, uint32_t range, uint32_t fineFocusStepSize, uint32_t& focusPosition);
    bool adjustBackgroundIntensity (Led::Type ledType, uint32_t intensity, uint32_t maxOffset);

private:
	void signalHandler (const boost::system::error_code& ec, int signal_number);
	void onCameraTrigger();
	void onAutoFocusCameraTrigger();
    void onAdjustBackgroundIntensityCameraTrigger();
	void onCameraTriggerTimeout();
	bool coarseFocus (BusinessObject::SharpnessData_t& sharpnessData, uint32_t startingPosition);
	SharpnessData_t fineFocus (BusinessObject::SharpnessData_t& maxFocusData, uint32_t range, uint32_t stepSize);
	SharpnessData_t fineFocusForAnalysis (BusinessObject::SharpnessData_t& maxFocusData, uint32_t range, uint32_t stepSize);

	bool inited_;
	std::shared_ptr<boost::asio::signal_set> pSignals_;
	std::shared_ptr<boost::asio::io_service> pLocalIosvc_;
	std::shared_ptr<boost::asio::io_service::work> pLocalWork_;
	std::shared_ptr<std::thread> pThread_;
	std::shared_ptr<ControllerBoardInterface> pCBI_;
	std::shared_ptr<LedControllerBoardInterface> pLCBI_;
	std::shared_ptr<Led> pLed_;
	std::shared_ptr<Camera> pCamera_;
	std::shared_ptr<SyringePump> pSyringePump;
	std::shared_ptr<CarouselController> pCarouselController_;
	std::shared_ptr<PlateController> pPlateController_;
	std::shared_ptr<FocusController> pFocusController_;
	std::shared_ptr<ReagentController> pReagentController_;
	std::shared_ptr<Rfid> pRfid_;
	SampleRunList runList_;
	std::string runFilename_;
	uint32_t imageCnt_;
	ImageProcessing imageProcessing_;
	std::string outputDirectory_;
	uint32_t exposureTime_usec_;

	double backgroundSharpness_;
    uint32_t focusCoarsePosition_;

    Mat fgMaskMOG_; // fg mask generated by MOG method
    Ptr<BackgroundSubtractorMOG> pMOG_; // MOG Background subtractor
    bool resetBackgroundImageSubtraction_;
    uint32_t averageIntensity_;
    int32_t sharpness_;
	SamplePositionDLL samplePosition;
	bool isTubePresent_;
	bool isCarrierCarousel_;
	bool isCarrierPlate_;

	HawkeyeConfig::HawkeyeConfig_t* config_;
};
